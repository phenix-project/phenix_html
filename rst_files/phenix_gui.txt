==============================
The phenix graphical interface
==============================

.. contents::

--------
Overview
--------

The Phenix GUI is primarily a frontend to the command-line programs, with
several extra graphical utilities for validation, map generation, and file
manipulations.  The original GUI is still available but deprecated, and all
functionality has been more or less superseded.  This page covers the main
interface and common behavior; individual program GUIs are covered separately.
The GUI runs on all supported operating systems but with some limitations on
specific platforms, in particular `Microsoft Windows
<http://phenix-online.org/platforms/windows.html>`_.

The main GUI is started simply by typing the command ``phenix``; by default,
it will also open automatically when you launch any of the individual
program GUIs.  You should not run more than one instance of the GUI at a
time, to avoid conflicts with internal database files.

.. image:: images/gui_main.png

-----------------------------
Running programs from the GUI
-----------------------------

When starting a job, Phenix writes out a configuration file and calls the
command-line version of the program.  The method of execution varies
depending on operating system.  On Linux and Windows, By default the job
is started directly in
the main process, i.e. "locally", which allows communication between the
program and the GUI in memory rather than via temporary files.  The drawback
to this is that if the GUI is closed or crashes, the job will be ended too.
An alternate "detached" mode is available (and used as default on Mac),
which starts the job as an entirely
separate process.  This limits the speed at which the GUI can be updated,
but allows quitting the GUI without stopping the job.

A third mode, available only to Linux users,
is to run jobs on a queueing system; while this could be done
entirely on a multi-core workstation, it will usually be spread across a
cluster of similar computers.  Currently Sun Grid Engine, PBS, LSF, and
Condor are supported to varying degrees.
To enable queued jobs, open the Preferences, switch to the "Processes"
tab, and check the box to enable queueing.  The queue submission option will
now appear when starting a job.  For this to work, the queue job
management binaries (for instance, 'qsub',
'qstat', and 'qdel' in SGE) must be in the current environment $PATH, Phenix
must be installed in the same location on all nodes, and the filesystem on
which the job is being run must be mounted on all nodes.  The GUI will display
a "waiting" status until the job is actually started.  The main interface
has a window for viewing the current queue status (Utilities->Show queue
status).

-------
Modules
-------

Individual programs are grouped by category.  Except where noted, most of
these correspond to command-line programs, and the documentation for the
command-line version should be the primary reference for understanding
program behavior and inputs.  Additional GUI documentation is available
for some programs.

----------------------------------------------------
Using AlphaFold and other predicted models in Phenix
----------------------------------------------------

- `Overview <reference/alphafold.html>`_: Overview of AlphaFold and predicted models in Phenix, with links to video tutorials.
- `PredictAndBuild <reference/predict_and_build.html>`_: How to solve an X-ray or cryo-EM structure using AlphaFold models.
- `PredictModel <reference/predict_model.html>`_: How to predict a structure with AlphaFold using the Phenix server through the Phenix GUI.
- `ProcessPredictedModel <reference/process_predicted_model.html>`_: How to process a predicted model and obtain just the high-confidence parts, split into domains.



---------------
Crystallography
---------------

Data analysis and manipulation
------------------------------

- `Xtriage <reference/xtriage_gui.html>`_: comprehensive reflection data analysis and
  quality assessment; used to detect twinning and other pathologies.  Also
  used internally in the AutoSol and AutoBuild wizards.

- `Calculate merging statistics <reference/unmerged_data.html>`_: calculate R-sym,
  R-meas, mean I/sigma, CC1/2, and related statistics starting from scaled,
  unmerged intensities.

- `Analyze anomalous signal in a SAD experiment <reference/anomalous_signal.html>`_

- `Scale unmerged anomalous data or multiple datasets <reference/scale_and_merge.html>`_

- `Reflection file editor <reference/reflection_file_editor.html>`_: utility for
  merging reflection files and creating or extending R-free flags. (GUI only)

- `Import CIF structure factors <reference/cif_as_mtz.html>`_: convert a CIF file (used
  by the PDB to store deposited experimental data) to an MTZ file.  This will
  automatically fetch data for a known ID from the PDB, or you may supply
  your own files.

- French & Wilson data correction: procedure for estimating appropriate
  values for weak and negative intensities.  This is also run automatically
  as part of several programs, including phenix.refine and the Phaser GUIs.

- `3D and 2D data viewers <reference/data_viewer.html>`_: these display data from
  reflection files (usually
  amplitudes or intensities) as they appear in reciprocal space, either in
  a full 3D view or a pseudo-precession camera section.

Validation and map-based comparisons
------------------------------------

- `Comprehensive validation <reference/validation.html>`_: based on the `MolProbity
  server <http://molprobity.biochem.duke.edu>`_ (and sharing much of the
  same code), with added analysis of experimental data.  Reports R-work and
  R-free, statistics for
  geometry restraints, Ramachandran plot, sidechain rotamers, C-beta
  deviation, all-atom contacts, and real-space correlation with electron
  density.  Outlier lists are linked to graphics programs such as Coot,
  and clicking a residue or atom will zoom in on that site in the graphics
  window.  Coot will also display clashes detected by PROBE.

- `Structure comparison <reference/structure_comparison.html>`_: a tool for evaluating
  assorted model features and validation criteria for multiple related
  structures, and highlighting regions of difference.  Automatically
  superposes model and maps into a common frame of reference for viewing in
  Coot or PyMOL.

- Comparison of unmerged data quality with refined model, as \
  described in Karplus & Diederichs (2012).  Phenix.cc_star.

- EMRinger: Model validation for de novo electron microscopy structures

- `Map and model-map correlations and offsets <reference/map_correlations.html>`_: Map-map and map-model correlation allowing optional translational offsets

- `POLYGON <reference/validation.html>`_: graphical comparison of user-selected
  model statistics with similar structures in the PDB.
 
Experimental phasing
--------------------

- `AutoSol <reference/autosol.html>`_: automated experimental phasing for all
  experiment types (SAD, MAD, MIR, etc.); also performs simple model-building
  after phasing.  Combines HySS, Phaser, SOLVE, RESOLVE, and phenix.refine.

- `Hybrid substructure search <reference/hyss.html>`_: heavy-atom site identification
  program.  Used automatically as part of AutoSol.

- `Phaser-EP <reference/phaser_ep.html>`_: Another Phaser interface, for SAD and MR-SAD
  phasing.  We recommend trying AutoSol first, but this GUI exposes
  additional parameters.

- `Plan a SAD experiment <reference/plan_sad_experiment.html>`_: Estimate required 
  data quality 
  for successful SAD phasing  given experimental parameters

Molecular replacement
---------------------

- `MRage <reference/MRage.html>`_: automated molecular replacement using Phaser;

- `Phaser-MR <reference/phaser_mr.html>`_: Interface for molecular replacement using
  standalone `Phaser <reference/phaser.html>`_, with all parameters available as well
  as different modes of operation.  We recommend starting with MRage
  first, but this GUI is useful for tough cases.

- `MR-Rosetta <reference/mr_rosetta.html>`_: automation pipeline for exceptionally
  difficult structures, which uses the
  `Rosetta <http://www.rosettacommons.org>`_ software for protein structure
  prediction and design to rebuild poor MR solutions, along with Phaser and
  AutoBuild.  (Separate installation of Rosetta is required.)

- `Sculptor <reference/sculptor.html>`_: prepare a search model for molecular
  replacement by trimming the structure, modifying B-factors, etc.

- Sculptor - Coot interface: a Coot plugin for running Sculptor interactively
  and visualizing results.

- `Ensembler <reference/ensembler.html>`_: tool for creating superimposed ensembles
  of related MR search models.

Maps (create, manipulate, compare)
----------------------------------

- `Create map coefficients <reference/create_maps.html>`_: simple GUI for generating
  likelihood-weighted maps, including 2mFo-DFc, mFo-DFc, anomalous, and
  others, including averaged "kick" maps.  Currently works only on untwinned
  data. (GUI only)

- `Generate composite omit maps <reference/composite_omit_map.html>`_: Tool for creating a
  composite omit map.

- Isomorphous difference map: simple utility for creating a map from two
  sets of amplitudes.  Corresponds to the command-line program
  phenix.fobs_minus_fobs_map.

- `Cut out density <reference/cut_out_density.html>`_: extracts a section of electron
  density from input map coefficients, and outputs new map coefficients
  (suitable for running molecular replacement in Phaser).

- `Superpose maps <reference/superpose_maps.html>`_: given two PDB files and
  accompanying map coefficients
  (in MTZ format), superposes the PDB files and reorients the maps to
  follow them.  Output is the reoriented PDB files and maps in CCP4 format.

- Map sigma level comparison: Calculate equivalent sigma levels when 
  visually comparing two maps

- Find difference map peaks and holes: Identify local maxima and minima in mFo-DFc map 
  (and anomalous map if available) and flag waters with excess density

- `Model-based phases <reference/reciprocal_space_arrays.html>`_: calculate phases and
  structure factors in a variety of formats (including Hendrickson-Lattman
  coefficients).

- `Create a map from map coefficients <reference/mtz2map.html>`_: convert an 
  MTZ file containing
  map coefficients to one or more CCP4 or XPLOR-format maps suitable for
  viewing in PyMOL, etc.  (Note that the main maps GUI and many other
  programs can also output these files, and the GUI will generate them for
  you as necessary for PyMOL.)

- `Optimize a map by sharpening <reference/map_sharpening.html>`_: Automatic or manual map sharpening/blurring.

- `Calculate F(model) <reference/fmodel.html>`_: utility for generating structure
  factors (as real or complex numbers) from a model alone.

Enhanced maps (Polder, FEM, density-modified...)
------------------------------------------------

- `Calculate Polder maps <reference/polder.html>`_: compute omit map excluding bulk solvent <polder.html>`_

- `RESOLVE density modification <reference/autobuild_gui.html>`_: This is just a
  simplified interface for running the `AutoBuild wizard <reference/autobuild.html>`_ in
  map-only mode.

- Solvent flipping density modification: Simple density modification by solvent flipping

- `Multi-crystal averaging <reference/multi_crystal_average.html>`_: performs density
  modification on different crystal forms of the same structure and averages
  the maps around the models.

- Maximum entropy map: Statistical map modification procedure to remove artifacts
  due to missing data

- `Feature Enhanced Map (FEM) <reference/fem.html>`_: Calculate a 2mFo-DFc map 
  locally scaled and 
  density-modified to enhance fine details


Model building
--------------

- `PredictAndBuild <reference/predict_and_build.html>`_: Solve an X-ray structure using AlphaFold models.

- `AutoBuild <reference/autobuild_gui.html>`_: automated model-building and refinement
  with RESOLVE and phenix.refine.  This GUI only encapsulates the building
  functions; a separate GUI is available for omit-map calculations.

- `Phase and build <reference/phase_and_build.html>`_: similar to AutoBuild, but
  significantly faster (although less accurate).

- `Find Helices and Strands <reference/find_helices_strands.html>`_: fast building of
  secondary structure (as poly-ALA) into maps with RESOLVE and PULCHRA.
  Especially good for low-resolution data.


- `Morph model <reference/morph_model.html>`_: improvement of poor molecular replacement
  solutions by "morphing" into density and rebuilding.

- `Map to model <reference/map_to_model.html>`_: Model-building into cryo-EM and 
  low-resolution maps

Refinement
----------

- `phenix.refine <reference/refine_gui.html>`_: automated refinement, supporting both
  X-ray and neutron data.  In addition to the features available in the
  command-line program, the GUI version includes graphical atom selection,
  simplified setup of restraints, automatic addition of hydrogens, and
  post-refinement validation.

- `phenix.real_space_refine <reference/real_space_refine.html>`_: automated refinement
  using a map and model (CCP4 format or MTZ format with map coefficients)

- `DEN refinement <reference/den_refine.html>`_: Deformable elastic network refinement 
  using simulated annealing, for low-resolution and molecular replacement structures

- `Ensemble refinement <reference/ensemble_refinement.html>`_: Time-averaged molecular 
  dynamics refinement - models disorder using a combination of multiple models and TLS

- `Rosetta refinement <reference/rosetta_refine.html>`_: Hybrid Rosetta/Phenix refinement 
  for low-resolution X-ray crystal structures

- `ReadySet <reference/ready_set.html>`_: preparation of input files for refinement,
  including generating restraints (CIF) files and adding hydrogens.

- AmberPrep: Utility for preparing files for refinement automatically generate the four 
  files needed for Phenix-Amber

Ligands
-------

- `LigandFit <reference/ligandfit.html>`_: wizard for placing ligands in electron
  density maps, accounting for necessary conformational changes.

- `eLBOW <reference/elbow.html>`_: electronic Ligand Builder and Optimization
  Workbench, a tool for generating restraints (and geometries) for any
  molecule, using a variety of inputs including PDB file and SMILES string.

- `Ligand pipeline <reference/ligand_pipeline.html>`_: Automated molecular replacement, 
  refinement, and ligand placement for high-throughput crystallography

- `REEL <reference/reel.html>`_: "Restraints Editor Especially Ligands", a graphical
  editor for CIF files, also serves as a frontend to eLBOW.  Currently runs
  as a separate program. (GUI only)

- `Ligand search <reference/ligand_identification.html>`_: program for identifying
  unknown blobs of electron density and placing appropriate ligand(s).

- `Guided ligand replacement <reference/guided_ligand_replacement.html>`_: Ligand 
  fitting based on an existing protein-ligand complex


-------
Cryo-EM
-------

Map analysis, symmetry, manipulation
------------------------------------

- `Mtriage <reference/mtriage.html>`_: Analyze quality of cryo-EM maps and models

- `Local resolution <reference/local_resolution.html>`_: Calculate a local resolution map

- `Map symmetry <reference/map_symmetry.html>`_: Find map reconstruction symmetry

- `Map box <reference/map_box.html>`_: Extract box of density with model or extract 
  unique part


Map improvement
---------------

- `Optimize a map by sharpening <reference/map_sharpening.html>`_: Automatic or manual map sharpening/blurring.

- `Resolve Cryo EM <reference/resolve_cryo_em.html>`_: Density modify a cryo EM map

- `Combine Focused Maps <reference/combine_focused_maps.html>`_: Align maps and combine the best parts of each


Docking, model building and rebuilding
--------------------------------------

- `PredictAndBuild <reference/predict_and_build.html>`_: Interpret a cryo-EM map using AlphaFold models.

- `Dock in map <reference/dock_in_map.html>`_: Dock a model into map

- `Map to model <reference/map_to_model.html>`_: Model-building into cryo-EM maps

- `Pathwalker <reference/pathwalker.html>`_: Chain tracing with cryo-EM maps

- `Rebuild model <reference/rebuild_model.html>`_: Rebuild a model, keeping connectivity

- `Complete model <reference/model_completion.html>`_: Break up and reassemble a 
  model, filling in gaps

- `Sequence from map <reference/sequence_from_map.html>`_: Determine a sequence from a map

- `Fit Loops <reference/fit_loops.html>`_: Build missing loops into
  a map based on a sequence and starting model

- Douse (Add waters): Add waters to cryo-EM models

- `CryoFit <reference/cryo_fit.html>`_: Flexibly fit a model to a cryo-EM map

Refinement
----------

- `phenix.real_space_refine <reference/real_space_refine.html>`_: automated refinement
  using a map and model (CCP4 format or MTZ format with map coefficients)

- `eLBOW <reference/elbow.html>`_: electronic Ligand Builder and Optimization
  Workbench, a tool for generating restraints (and geometries) for any
  molecule, using a variety of inputs including PDB file and SMILES string.


------
Models
------


Superpose, search, compare, analyze symmetry
--------------------------------------------

- `Superpose PDB files <reference/superpose_pdbs.html>`_: structure alignment program.

- `Secondary-structure matching <reference/superpose_and_morph.html>`_: Align with SSM, 
  morph and trim a model

- `PDB Search: Match phi-psi angles or sequence <reference/structure_search.html>`_:
  Ramachandran or sequence-based PDB search

- `Secondary structure PDB search <reference/search_and_morph.html>`_: SSM match, 
  morph and trim

- `Fragment search <reference/fragment_search.html>`_: Find and morph matching 
  fragments from PDB

- `Chain comparison <reference/chain_comparison.html>`_: Find similarity between 
  two main-chains

- `Replace with fragments from PDB <reference/replace_with_fragments_from_pdb.html>`_:
  Replace entire model with fragments from PDB

- `NCS identification <reference/find_ncs.html>`_: determine appropriate NCS operators
  and/or restraint groups based on a set of heavy-atom sites, macromolecule
  chains, or electron density.

- `Find alternate-origin symmetry mate <reference/find_alt_orig_sym_mate.html>`_: 
  Transform a model to place it in same ASU and frame of reference as another


Modification, minimization and dynamics
---------------------------------------

- `Process predicted model <reference/process_predicted_model.html>`_: Replace B-factor 
  field in model and optionally split into domains

- `Trim overlapping <reference/trim_overlapping.html>`_: Trim parts of a model 
  overlapping another model

- `PDB Tools <reference/pdbtools.html>`_: various model manipulations such as
  modifying atom records, geometry minimization, and generating "fake"
  structure factors.

- PDB editor:  graphical tool for editing PDB files


- `Apply NCS <reference/apply_ncs.html>`_: apply NCS operators to a PDB file 
  to generate the complete asymmetric unit.  Note that a simpler NCS GUI 
  is also available as a plugin to the ``phenix.refine`` GUI, and does 
  not necessarily need to be run separately.

- `Model Reconstruction <reference/multimer_reconstruction.html>`_: Get 
  asymmetric unit or biological unit with BIOMT or MTRX

- `Geometry minimization <reference/geometry_minimization.html>`_: Regularize 
  geometry for a model (without data)

- `Simple dynamics <reference/dynamics.html>`_: Shake a model using 
  crude molecular dynamics

- Combine PDB files: simple utility for merging models split over several
  PDB files (such as massive complexes like the ribosome).  Chain IDs will
  be modified if necessary (using up to two characters).

- Add conformations:  Add alternate conformations in bulk, for an entire model 
  or user-defined atom selection

- Perturb model with normal mode analysis: Uses NMA in Phaser to generate 
  perturbed models along the direction of the normal modes

- `Identify domains with normal mode analysis (SCEDS) <reference/sceds.html>`_:
  Uses NMA in Phaser to identify approximate rigid domains

- `Sort heteroatom groups <reference/sort_hetatms.html>`_: Rearrange the 
  non-polymer heteroatom groups in a model to group with the nearest 
  macromolecule chain, similar to the protocol used by the PDB

- `Prepare model for PDB deposition <reference/prepare_pdb_deposition.html>`_:
  Finalize mmCIF files for deposition to the PDB

- `Get PDB validation report <reference/get_pdb_validation_report.html>`_:
  Retrieve a validation report from the PDB

- `Generate Table 1 <reference/table_one.html>`_: utility for extracting 
  statistics from PDB, reflection, and log files required for publication.

- `Find a Program <reference/find_program.html>`_: Search for a program or test

Other tools
-----------

A number of simpler tasks involving file modification and visualization can
be accessed by clicking the button labeled "Other tools" on the toolbar.

.. image:: images/gui_misc_tools.png

Current options include:

- **Fetch PDB data**: Download structure data in PDB, FASTA, or CIF/MTZ
  format.  (Command line equivalent: ``phenix.fetch_pdb``.)

- **Convert PDB file(s) to FASTA**: Extract sequences of polymer chains
  in a model, with flexible options for handling gaps, insertions, etc.
  (Command line equivalent: ``iotbx.pdb_as_fasta``.)

- **Multiple sequence alignment**: uses the public-domain program MUSCLE
  (Edgar 2005) to perform alignment of sequences in various formats
  (including automatic extraction of sequences from PDB files).
  (Command line equivalent: none, but MUSCLE can be run in PHENIX with
  the command ``phenix.muscle``.)

- **Plot average B-factors in PDB file**: Plots residue B-factors (for
  all atoms, backbone, or sidechain) as a horizontal line graph.
  (Command line equivalent: ``mmtbx.bfactor_plot``.)

- **Reindex reflections**: Performs change-of-basis operations on reflection
  files.  (Command-line equivalent: ``phenix.reindex``.)

- **Modify PDB file**: Shortcuts for performing some of the most common
  tasks in ``phenix.pdbtools`` (also available as a full GUI).

- **PDB remediation**: Convert between versions 2 and 3 of the PDB format.
  (Command-line equivalent: ``iotbx.pdb_remediator``.)

- **Import data and flags**: Prepares data for use in refinement; this tool
  is especially useful when bringing in new high-resolution reflections for
  an already-refined structure.

- **Plot PDB statistics**: Generates scatter plots or histograms of
  statistics output by phenix.model_vs_data for a large fraction of the PDB
  (nearly all X-ray structures with experimental data available).  The same
  database is used to generate the plots in **POLYGON**.

- **Inspect R-free flags**: Plots distribution of R-free flags in a
  reflections file; this is primarily used to determine whether the flags
  have been created in thin resolution shells.  (Command line equivalent:
  ``wxtbx.inspect_r_free_flags``.)

--------
Projects
--------

Like the CCP4 GUI (ccp4i), Phenix manages data and job history by grouping
into projects.  You will be prompted to create a project the first time you
start the GUI.  On subsequent launches Phenix will attempt to guess the
project based on the current directory.  There are several constraints on
project management:

  - Project IDs should be no more than 24 characters and contain only
    alphanumeric characters (including underscore).

  - Project directories may not be nested, i.e. you may not create a project
    for a directory that is part of an existing project, or that has a
    subdirectory that is owned by another project.

When a project is created Phenix will create a folder ".phenix" in the project
directory; this is used to store job history, temporary files, and other
internal data.  Users should not need to modify this folder unless deleting
the project.  All functions related to project management are available
from the main GUI only, either in the toolbar or the File menu.

The current version of the
GUI has limited functionality for configuring projects.  Several options
are available for setting the behavior of ``phenix.refine``, such as
default parameter files.  The GUI will give you the opportunity to create
these files automatically, but this feature is optional.  The other primary
function of the projects is storing job history; although this feature is
still in development, it will save basic statistics and configuration files,
and can restore the parameters and results of any successful previous run.

.. image:: images/job_history.png

You may switch between projects while a GUI program is running; however, each
program window stays associated with the project it was opened with.

----------------
Selection Editor
----------------

A unified interface for making atom selections. More details can be found on
`this page <reference/selection_editor.html>`_.

------------------------
Running PHENIX tutorials
------------------------

A number of examples using published structures are included in the PHENIX
installation, and can be automatically loaded into the GUI as new projects.
To load tutorial data, click on "New project" in the main GUI; this window
also appears the first time the PHENIX GUI is started (before any projects
have been created).  The button "Set up tutorial data" will open a new dialog
with a list of examples, grouped by the methods they are intended to
demonstrate.

.. image:: images/tutorial_setup.png

For live demonstration, we normally use the **P. aerophilum translation
initiation-factor 5a** or *p9-sad* example for experimental phasing,
**TEM-1 Beta-lactamase/beta-lactamase inhibitor complex** (*beta-blip*) for
molecular replacement, **S. aureofaciens ribonuclease Sa** (*rnase-s*) for
refinement, and **N-ethylmaleimide sensitive factor + ATP** (*nsf-d2-ligand*)
for ligand fitting.  All of these datasets run relatively quickly (5-30
minutes) in the intended programs.  (These examples are also used extensively
in this documentation.)

-----------
Preferences
-----------

Some of the behavior of the GUI can be customized via the Preferences dialog,
which is available from the File menu (Linux) or Phenix menu (Mac) and on the
toolbar of most programs.

.. image:: images/gui_prefs.png

Because some of the larger programs may have up to 500 distinct parameters,
many of which rarely need changing, advanced settings are hidden by default.
You may control this in individual dialogs using the "User level" menu at
the bottom of the window, or change the global level in the "PHENIX interface"
pane (shown above), in the "User level" option.  For example, in
*phenix.refine*, a typical configuration dialog will look like this when the
user level is "Basic":

.. image:: images/gui_level0.png

When set to "Advanced", many more options will appear:

.. image:: images/gui_level2.png

Other Preferences settings determine what external programs are used for
various file types, interactions with molecular graphics programs (Coot,
PyMOL, and the simple built-in graphics), and options for some of the
specific modules in Phenix.

----------------
Coot integration
----------------

`Coot <http://www.biop.ox.ac.uk/coot/>`_ is an open-source (GPL) model-building
program written by Paul Emsley.   Although we do not distribute it with
Phenix, it is available as source and binaries for Linux (from the developer's
page), and third-party Mac binaries are available (provided by Bill Scott).
Documentation on how to use it with Phenix is `here <coot.html>`_.  Phenix
will try to locate Coot on your system automatically, but if it is not found,
you may specify the command to use under *Preferences->Graphics->Full path to
Coot.*

-----------------
PyMOL integration
-----------------

`PyMOL <http://pymol.org>`_ is an open-source molecular viewer written by
Warren DeLano.  We distribute an older precompiled version (0.99) with Phenix;
however, we recommend installing the latest version and add the command
under *Preferences->Graphics->Full path to PyMOL*.  More information is
in the separate `PyMOL instructions <pymol.html>`_.

--------------
Reporting bugs
--------------

Bugs in the code may result in a pop-up window containing a detailed error
message.  Clicking "OK" will send an email to the Phenix developers with
this information.  We strongly encourage users to submit these reports, as
they are one of the primary mechanisms by which we identify coding errors.
The report will include the error message, information about the host
system, and user name/email; no other personally identifying information or
data is sent.

.. image:: images/gui_error.png

---------------
Acknowledgments
---------------

The PHENIX GUI is written in Python 2.7, using the wxPython toolkit for
most features, plus matplotlib for plotting.
Some of the icons used in the GUI came from the `Crystal Icons project
<http://www.iconarchive.com/show/crystal-clear-icons-by-everaldo.html>`_
by `Everaldo Coelho <http://www.everaldo.com>`_ which is licensed under the LGPL.  Many
additional icons (anything with a molecular representation) were generated
using PyMOL.

Several open-source programs have been included with PHENIX and
are used in various ways in the GUI; we are grateful to their authors for
permission to redistribute the code:

  - `**MUSCLE** <http://www.drive5.com/muscle>`_ written by Bob Edgar.
    Edgar, R.C. (2004) MUSCLE: multiple sequence alignment with high accuracy
    and high throughput.Nucleic Acids Res. 32(5):1792-1797.

  - `**ksDSSP** <http://plato.cgl.ucsf.edu/chimera/docs/UsersGuide/midas/ksdssp.html>`_ written by UCSF Computer Graphics Laboratory.  Original method
    (independently reimplemented): W. Kabsch and C. Sander, "Dictionary of
    Protein Secondary Structure: Pattern Recognition of Hydrogen-Bonded and
    Geometrical Features" Biopolymers 22:2577 (1983).

  - PULCHRA (Rotkiewicz & Skolnick 2008)

References
----------

{{citation:phenix_gui}}
{{citation:pulchra}}
