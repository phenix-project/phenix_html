===================================================
Creating maps and map coefficients with phenix.maps
===================================================

``phenix.maps`` is a simple command-line tool for calculating map coefficients
from a model and reflections file, with optional FFT to generate an actual
map file.  The program is largely self-documenting; this section essentially
reproduces the command-line output of the program when run without arguments.
As of PHENIX version 1.6.4, much of the parameter syntax is identical in
``phenix.maps`` and ``phenix.refine``.  There is also a `GUI for phenix.maps
<create_maps.htm>`_, with separate documentation, but most of the information
below applies to both the command-line and graphical versions.

How to run
==========

  1. Run phenix.maps without any arguments: just type phenix.maps in the command
     line and hit Enter. This will creare a parameter file called maps.params,
     which can be renamed if desired.

  2. Edit maps.params file to specify input/output file names, data labesl and
     the desired maps. It is possible to request as many maps as desired. By
     default, the file maps.params specifies 5 maps to be created: 2mFo-DFc,
     2mFo-DFc with missing Fobs filled with DFcalc, mFo-DFc and anomalous
     difference maps will be output in MTZ format, and one 2mFo-DFc map will be
     output in X-plor formatted file.

  3. Run this command to compute requested maps: phenix.maps maps.params

Remarks
=======

  - The scope of parameters 'map_coefficients' defines the map that will be
    output as Fourier map coefficients. The scope of parameters 'map' defines
    the map that will be output as X-plor or CCP4 formatted map.

  - To create several maps: duplicate either 'map_coefficients' or 'map' or both
    scopes of parameters as many times as many maps is desired. Then edit each
    of them to define the maps.

  - A map is defined by specifying a map type using 'map_type' keyword available
    within each scope of parameters: 'map_coefficients' or 'map'. The general
    supported format for 'map_type' is: [p][m]Fo+[q][D]Fc[kick][filled]. For
    example: 2Fo-Fc, 2mFobs-DFcalc, 3Fobs-2Fmodel, Fo-Fc, mfobs-Dfcalc, anom.
    The 'map_type' parser will automatically recognize which map is requested.

  - The program creates an individual map file for each X-plor/CCP4 map
    defined in the parameters, but it creates only one MTZ
    formatted file with all Fourier map coefficients in it.

  - The X-plor formatted map can be computed in the entire unit cell or around
    selected atoms only.

  - Kick maps and missing Fobs filling is done (if requested) as described in
    Adams et al. (2010). Acta Cryst. D66, 213-221.

  - Twinning (if detected) will be accounted for automatically. This can be
    disabled by using "skip_twin_detection=True" keyword.

  - All arrays used in map calculation, for example: Fobs, Fmodel, Fcalc, Fmask,
    m, D, etc., can be output into a CNS or MTZ formatted reflection file.

  - For those who likes to experiment: bulk solvent correction and anisotropic
    scaling can be turned off, the data can be filtered by sigma and resolution.

FFT-ing map coefficients
========================

If you already have map coefficients in an MTZ file and just want to run an
FFT to produce X-plor or CCP4 map files, use ``phenix.mtz2map``.  In most
cases this can be run automatically by passing the name of the MTZ file.
MTZ files generated by ``phenix.maps``, ``phenix.refine``, SOLVE/RESOLVE, and
REFMAC are supported, and additional combinations of map coefficients are
possible if defined by the user.  By default, output files will take the
base name of the MTZ file, with the appropriate map type appended if it
can be guessed from the column labels, otherwise a unique integer, followed
by the file type extension (.ccp4 or .xplor).

Other map types
===============

The functionality in ``phenix.maps`` is intentionally kept simple, but
more complex map calculations may be performed in other programs:

  - For isomorphous difference maps (Fobs-Fobs),
    use ``phenix.fobs_minus_fobs_map`` (documentation to be added).

  - For omit maps, including composite omit maps and iterative build omit
    maps, use the `AutoBuild wizard <autobuild.htm>`_.

  - You can also generate a simple simulated-annealing omit map by deleting
    the relevant part of the molecule and running `phenix.refine
    <refinement.htm>`_ with ``simulated_annealing=True``.  (This is essentially
    the same was what is done by AutoBuild, however.)
