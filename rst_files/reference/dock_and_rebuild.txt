Processing, docking and rebuilding AlphaFold2 and other predicted models in cryo-EM maps
========================================================================================

Author(s)
---------

-  dock_and_rebuild: Tom Terwilliger

Purpose
-------

Dock and rebuild combines the functions of processing, docking and 
rebuilding predicted models produced by AlphaFold, 
RoseTTAFold and other prediction software into a cryo EM map.

These steps can also be carried out one at a time.
There are three steps in working on an AlphaFold or other predicted model with 
a cryo-EM structure.

The first step is to process the predicted model
by trimming off all the uncertain residues in the predicted
model and breaking up the remaining structure into a best guess of
rigid domains with
`phenix.process_predicted_model <process_predicted_model.html>`_ .

The next step is to dock each of the domains of the processed model into
the map, keeping plausible connectivity. This is done with
`phenix.dock_predicted_model <dock_predicted_model.html>`_ .

The third step is to morph the predicted model onto the docked domains and then
to rebuild all the parts of the predicted model using the density in the map.
This is done with 
`phenix.rebuild_predicted_model <rebuild_predicted_model.html>`_ .

How dock_and_rebuild works:
----------------------------------

The dock_and_rebuild procedure is just a way to connect all three steps 
in processing, docking and rebuilding a predicted model.  You may want to
use this procedure if you have a simple case, or if you have many models
you want to process.  If it does not work well, you may want to take its
intermediate outputs (i.e., the docked model) and carry out the following
steps individually.

The model input to dock_predicted_model is your starting predicted 
model file (i.e., an AlphaFold model)

The map input to dock_predicted model is normally your best sharpened or
density-modified cryo-EM map.  It can also be a map generated by any other
procedure (including crystallography).

If you are able to mask your map, keeping only the part representing the 
region where this model belongs, that can be very helpful. You can also
box the map around this region.  If you have a map that has many chains,
this masking can greatly shorted the time for docking. If you don't know
where in your map the model goes at all, you can supply the entire map. If
your map has symmetry this will normally be found automatically.

The three steps described above are then carried out:
processing the model to obtain domains representing the accurate parts
of the model (`phenix.process_predicted_model <process_predicted_model.html>`_),
docking the domains 
(`phenix.dock_predicted_model <dock_predicted_model.html>`_),
and morphing and rebuilding the predicted model
(`phenix.rebuild_predicted_model <rebuild_predicted_model.html>`_) to 
yield a rebuilt version of the predicted model.


Examples
--------

Standard run of dock_and_rebuild:
----------------------------------------

Running dock_and_rebuild is easy. From the command-line you can type:

::

    phenix.dock_and_rebuild model=my_model.pdb \
       map_file=my_map.ccp4 \
       resolution=3

This will carry out all the steps of processing, docking and rebuilding
to yield my_model_rebuilt.pdb

Possible Problems
-----------------

Specific limitations and problems:
----------------------------------

Literature
----------

Additional information
----------------------


List of all available keywords
------------------------------

{{phil:phenix.programs.dock_and_rebuild}}
