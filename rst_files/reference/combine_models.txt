Merging two models with combine\_models
=======================================

Author(s)
---------

-  combine\_models: Tom Terwilliger

Purpose
-------

This routine takes a model and finds pieces of a second model file that
improve its fit to density when they replace the corresponding pieces in
the first model.

Usage
-----

The main uses of phenix.combine\_models are:

-  Taking the best parts of 2 models and merging them to make a new
   model.
-  Replacing a segment in one model with a corresponding segment from
   another.

How combine\_models works:
--------------------------

Combine\_models starts with two input models. The first model is used as
the default; if nothing can be found in the second model that is better
than what is in the first model, then that part of the first model is
kept. The second model is used as a template for improving the first
model. Fragments of the second model are considered as alternatives for
corresponding segments in the first model.

The fit of the models to density is used to decide which of a pair of
fragments is best. In general, the correlation of model density with the
map is used as the criterion. In cases where unequal numbers of residues
are considered, then this correlation is weighted by the square root of
the number of residues in each case. During the optional
merge\_second\_model step, the scoring is optionally based on
correlation of density, or by default, based on density at the positions
of the main-chain atoms in the model.

If the two input models are not in the same asymmetric unit of the
crystal, then combine\_models will move the pieces from the second model
to the corresponding locations in the first model. In this way the final
model has all its parts in the same place.

Combine\_models has four main steps, each of which is optional:

-  Selecting parts of the input models to consider, using atom
   selections. This step allows you to do things such as removing a
   segment from the first model, then crossing with the corresponding
   segment from the second model, effectively replacing that segment in
   a way that you specify.
-  Creating as complete a starting model as possible
   (merge\_second\_model=True). This is done by cutting the second model
   into small pieces and reassembling the first model, considering these
   pieces along with all the segments in the first model as potential
   pieces of the reassembled model. The result is a new working model.
-  Crossing the working model with the second input model, allowing only
   equal-length crossovers (matching=True). In this step, pairs of
   segments in the working model and the second input model that have
   overlapping residues are considered, one at a time. The local map
   correlation is calculated for each residue in each fragment. Then at
   each position, the coordinates from one fragment or the other are
   chosen, with the choice crossing over between one fragment and the
   other only at positions where the main-chain atoms in the residue are
   within match\_distance (default 0.5 A) of each other.
-  Crossing the working model with the second input model, allowing only
   unequal-length crossovers (non\_matching=True). This step is just
   like the previous one, except that only unequal-length crossovers are
   considered. If this method is included, then it may be necessary to
   reassign the sequence afterwards as the alignment may change
-  Checking the sequence. If unequal-length crossovers are made, then
   the sequence alignment to the model may need to be changed. This step
   carries that out.

*Output files from combine\_models*
-----------------------------------

**combine\_models.pdb**: A PDB file with your combined model.

Examples
--------

Standard run of combine\_models:
--------------------------------

Running combine\_models is easy. From the command-line you can type:

::

    phenix.combine_models pdb_in=first.pdb \
       second_pdb_in=second.pdb \
       seq.dat \
       map_coeffs.mtz

This will combine first.pdb and second.pdb based on fit to the map from
map\_coeffs.mtz, recheck the sequence alignment to seq.dat, and write
out the resulting model.

Selecting pieces from the two models:
-------------------------------------

To take first.pdb and then see if residues A21-A30 of second.pdb can
improve it, you can type:

::

    phenix.combine_models pdb_in=first.pdb \
       second_pdb_in=second.pdb \
       seq.dat \
       map_coeffs.mtz \
       second_pdb_in_atom_selection="(chain A and resid 21:30)" \

Replacing a specific segment:
-----------------------------

To take first.pdb and then see if residues A21-A30 and B21-B30 can be
improved by replacing them with residues C10-C20 and D10-D20 of
second.pdb, you can tell combine\_models to ignore residues A22-A29 and
B22-B29 and to consider only residues C10-C20 and D10-D20 of second.pdb:

::

    phenix.combine_models pdb_in=first.pdb \
       second_pdb_in=second.pdb \
       seq.dat \
       map_coeffs.mtz \
       pdb_in_atom_selection="(not  ( (chain A or chain B) and resid 22:29) )" \
       second_pdb_in_atom_selection="( (chain C or chain D) and resid 10:20)" \

Crossing two models that have entirely matched residues:
--------------------------------------------------------

If your first.pdb and second.pdb have exactly the same residues present,
and just differ in coordinates, then you might want to preserve all the
connectivity by skipping the merge\_second\_model step, and by skipping
the non\_matching crossover step, and by skipping the reassignment of
sequence. You can type preserve\_connectivity=True as a shortcut for
this:

::

    phenix.combine_models pdb_in=first.pdb \
       second_pdb_in=second.pdb \
       seq.dat \
       map_coeffs.mtz \
       preserve_connectivity=True

Possible Problems
-----------------

Specific limitations and problems:
----------------------------------

Literature
----------

Additional information
----------------------

{{phil:phenix.command_line.combine_models}}
