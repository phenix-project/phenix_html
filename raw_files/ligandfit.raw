
<!--REMARK PHENIX TITLE START  Put your title here>


<H4><U>Automated ligand fitting with LigandFit</U></H4> 


<!--REMARK PHENIX TITLE END-->

<!--REMARK PHENIX BODY START   Put your text here. 
Anything enclosed in header html H4 H5 etc will go in the table of contents>


      <P><H5><U><B>Author(s)</B></U></H5><P>
<UL><LI>LigandFit Wizard: Tom Terwilliger
<LI>PHENIX GUI and PDS Server: Nigel W. Moriarty
<LI>RESOLVE: Tom Terwilliger
</UL>

      <P><H5><U>Purpose</U></H5><P>

<P><H5>Purpose of the LigandFit Wizard</H5><P>

<P>The LigandFit Wizard carries out fitting of flexible ligands to
electron density maps.  

      <P><H5><U>Usage</U></H5><P>
<P>The LigandFit Wizard can be run from the PHENIX GUI, from the command-line, 
and from keyworded script files.  All three versions are identical except
in the way that they take commands from the user. 
See 
<a href="running-wizards.htm">
Running a Wizard from a GUI, the command-line, or a script</a> 
for details of how to run a Wizard.
The command-line version will be described here.
<P>
<P><H5>How the LigandFit Wizard works</H5><P>
<P>
<P>The LigandFit wizard  provides a command-line and
graphical user interface allowing the user to identify a datafile 
containing crystallographic structure factor information, an
optional PDB file with a partial model of the structure without the ligand,
and a PDB file containing the ligand to be fit (in an allowed but arbitrary
conformation). 
<P>The wizard checks the data files for consistency and then calls
RESOLVE to carry out the fitting of the ligand into the
electron-density map. The map used is normally a difference map, with F=FP-FC.
It can also be an Fobs map (calulated from FP with phases PHIC from the input
partial model), or an arbitrary map, calculated with FP PHI and FOM.
If you supply an input partial model, then the region occupied by the
partial model is flattened in the map used to fit the ligand, so that the
ligand will normally not get placed in this region.

<P>The ligand fitting is done by RESOLVE in a three-stage process. First,
the largest contiguous region of density in the map not already occupied
by the model is identified. The ligand will be placed in this density. (If 
desired, the location of the ligand can instead be defined by the user as 
near a certain residue or near specified coordinates. )
Next, many possible placements of the largest rigid sub-fragments of 
the ligand are found within this region of high density.  Third, each of
these placements is taken as a starting point for fitting the remainder of
the ligand. All these ligand fits are scored based on the fit to the density,
and the best-fitting placement is written out.

<P>The output of the wizard consists of a fitted ligand in PDB format and a
summary of the quality of the fit. Multiple copies of a ligand can be fit to a
single map in an automated fashion using the LigandFit wizard as well.

<P><H5>How to run the LigandFit Wizard</H5><P>
<P>  Running the LigandFit Wizard is easy.  For example, 
from the command-line you can type:
<PRE style="face=courier">phenix.ligandfit data=datafile.mtz model=partial_model.pdb ligand=ligand.pdb
</PRE>
<P>The LigandFit Wizard will carry out ligand fitting of the
ligand in ligand.pdb based on the
structure factor amplitudes in datafile.mtz, calculating phases based
on partial-model.pdb.  All rotatable bonds will be identified and allowed
to take stereochemically reasonable orientations.

<P><H5>What the LigandFit wizard needs to run</H5><P>

    The ligandfit wizard needs:
<P><UL><LI>(1) a datafile (w1.sca or data=w1.sca); this can be any format
<P><LI>(2) a PDB file with your model without ligand (model=partial.pdb;
optional if your datafile contains map coefficients)
<P><LI>(3) a file with information about your ligand (ligand=side.pdb)

<P>The ligand file can be a PDB file with 1 stereochemically acceptable
    conformation of your ligand. It can alternatively be a file containing
    a SMILES string, in which case the starting ligand conformation will be
    generated with the PHENIX elbow routine.

<P>The command_line ligandfit interpreter will guess which file is your
    data file but you have to tell it which file is the model and which is
    the ligand.

<P><H5>Specifying which columns of data to use from input data files</H5><P>
<P>If one or more of your data files has column names that the Wizard
cannot identify automatically, you can specify them yourself. You
will need to provide one column "name" for each expected column of data,
with "None" for anything that is missing.

<P>For example, if your data file data.mtz has columns FP SIGFP 
then you might specify
<PRE style="face=courier">data=data.mtz
input_labels="FP SIGFP"
</PRE>

<P>You can find out all the possible label strings in a data file that
you might use by typing:
<PRE style="face=courier">phenix.autosol display_labels=data.mtz  # display all labels for data.mtz
</PRE>

<P>You can specify many more parameters as well. See the list of
keywords, defaults and descriptions at the end of this page and
also general information about running Wizards at
<a href="running-wizards.htm">
Running a Wizard from a GUI, the command-line, or a script</a> 
for how to do this.  Some of the most common parameters are:
<PRE style="face=courier">data=w1.sca       # data file
partial_model=coords.pdb  # starting model without ligand
ligand=ligand.pdb # any stereochemically allowed conformation of your ligand
resolution=3     # dmin of 3 A
quick=False      # specify if you want to look hard for a good conformation
ligand_cc_min=0.75   # quit if the CC of ligand to map is 0.75 or better
number_of_ligands=3  # find 3 copies of the ligand
n_group_search=3     # try 3 different fragments of the ligand in initial search
resolve_command="'ligand_start side.pdb'" # build ligand superimposing on side.pdb
</PRE>

<P><H5><I>Output files from LigandFit</I></H5><P>
<P>When you run LigandFit the output files will be in a subdirectory with
your run number:
<PRE style="face=courier">LigandFit_run_1_/   # subdirectory with results
</PRE>

<P><LI>A summary file listing the results of the run and
the other files produced:
<PRE style="face=courier">LigandFit_summary.dat  # overall summary
</PRE>

<P><LI>A file that lists all parameters and knowledge accumulated
by the Wizard during the run (some parts are binary and are not printed)
<PRE style="face=courier">LigandFit_Facts.dat   # all Facts about the run
</PRE>

<P><LI>A warnings file listing any warnings about the run
<PRE style="face=courier">LigandFit_warnings.dat  # any warnings
</PRE>

<P><LI>A PDB file with the fitted ligand (in this case the first copy of ligand
number 1):
<PRE style="face=courier">ligand_fit_1_1.pdb
</PRE>

<P><LI>A log file with the fitting of the ligand:
<PRE style="face=courier">ligand_1_1.log
</PRE>

<P><LI>A log file with the fit of the ligand to the map:
<PRE style="face=courier">ligand_cc_1_1.log
</PRE>

<P><LI>Map coefficients for the map used for fitting:
<PRE style="face=courier">resolve_map.mtz
</PRE>
</UL>

      <P><H5><U>Examples</U></H5><P>
<P><H5> Sample command_line inputs</H5><P>

<P><UL><LI>Standard run of ligandfit (generate map from model and data file)
<PRE style="face=courier">phenix.ligandfit w1.sca model=partial.pdb ligand=side.pdb
</PRE>

<P><LI>Build into a map from pre-determined coefficients
<PRE style="face=courier">phenix.ligandfit data=perfect.mtz \
 lig_map_type=fo-fc_difference_map   \
   model=partial.pdb ligand=side.pdb
</PRE>

<P><LI>Quick run of ligandfit
<PRE style="face=courier">phenix.ligandfit w1.sca model=partial.pdb ligand=side.pdb quick=True
</PRE>

<P><LI>Run ligandfit on a series of ligands specified in ligand_list.dat
<PRE style="face=courier">phenix.ligandfit w1.sca model=partial.pdb \
  ligand=ligand_list.dat file_or_file_list=file_with_list_of_files
</PRE>
Note that you have to specify
<PRE style="face=courier">
file_or_file_list=file_with_list_of_files
</PRE>
or else the Wizard will try to interpret the contents of
ligand_list.dat as a SMILES string. Here the &quot;file_with_list_of_files&quot;
is a flag, not something you substitute with an actual file name.  You use
it just as listed above.

<P><LI>Place ligand near residue 94 of chain "A" from partial.pdb
<PRE style="face=courier">phenix.ligandfit w1.sca model=partial.pdb ligand=side.pdb \
   ligand_near_chain="A" ligand_near_res=92
</PRE>

<P><LI>Use start.pdb as a template for some of the atoms in the ligand; build
the remainder of the ligand, fixing the coordinates of the corresponding
atoms:
<PRE style="face=courier">phenix.ligandfit w1.sca model=partial.pdb ligand=side.pdb \
   resolve_command="'ligand_start start.pdb'"  # NOTE ' and " quotes necessary
</PRE>
Note that the formatting is slightly tricky and requires the two different
quotation marks on either end of the command. This is an example of passing a
specific keyword to RESOLVE.

</UL>
      <P><H5><U>Possible Problems</U></H5><P>

<P><H5>Specific limitations and problems</H5><P>

<P><UL><LI>The ligand to be searched for must have at least 3 atoms.

<P><LI>The partial-model file must not have any atoms in the position
where the ligand is to be built. If this file contains solvent waters,
then you may wish to remove them before building the ligand.

<P><LI>If a ring in the ligand can have more than one conformation
(e.g., chair or boat conformation) then you need to do separate runs
for each conformation of the ring (rings are taken as fixed units 
in LigandFit).

<P><LI>LigandFit ignores insertion codes, so if you specify a residue
with ligand_near_res, only the residue number is used.

<P><LI>The size of the asymmetric unit in the SOLVE/RESOLVE portion of 
the LigandFit wizard is limited by the memory in your computer and the
binaries used. The Wizard is supplied with regular-size ("", size=6), 
giant ("_giant", size=12), huge ("_huge", size=18) and extra_huge
("_extra_huge", size=36).  Larger-size versions can be obtained on
request.

<P><LI>The LigandFit Wizard can take most settings of most space groups,
however it can only use the hexagonal setting of rhombohedral space groups 
(eg., #146 R3:H or #155 R32:H), and it cannot use space groups 114-119 (not
found in macromolecular crystallography) even in the standard setting 
due to difficulties with the use of asuset in the version of ccp4 libraries 
used in PHENIX for these settings and space groups.

<P><LI>The PHENIX Wizards will automatically read some parameters from
previous runs of the same and any other Wizard in the same directory. 
The parameters that are set this way are:

<PRE style="face=courier">chain_type
dmin
expt_type
find_ncs
include_dm_score
input_seq_file
ligand_solutions
mad_ha_type
mask_type
ncs_copies
overall_score_method
residues
resolution
semet
solvent_fraction
thorough_denmod
truncate_ha_sites_in_resolve
use_met_in_align
</PRE>

Setting defaults for these parameters in this way is usually helpful, but 
if you set them in one run it is important to keep in mind that the value 
you have set them to will become the default for future runs in that 
directory (unless you delete that run).  If there are multiple runs 
in which a parameter is set, then the one that was started last sets 
the default for that parameter.


<LI>If you run a Wizard using input from an .eff file (such as one produced
by the Wizard when you run it from the command line) then parameters in the
.eff file that have the same value as the default may sometimes be 
changed by the Wizard.

<p> This happens because the Wizard sets some parameters after it starts up, 
based on the values of other parameters. If the Wizard can tell that you
have explicitly set a parameter, it won't change it. However if 
an .eff file has a parameter
with the same value as the default, then the Wizard cannot tell that you
want this value to be fixed.  There are only a few parameters where this
happens, as most parameters have None as the default and if you
set them to anything else then the Wizard can tell you have set them.
<p>Therefore if you need to force a variable to have a value that
is the same as the default, set it from the command line
where it is clear that you are setting this variable.  

<p> For example, in AutoBuild the default for input_map_file is None.
Suppose you have just completed a run of AutoSol and you want to
continue on with AutoBuild, but you do not want to use the resolve.mtz
map from AutoSol.
You might run AutoBuild from the command line like this: 
<PRE style="face=courier">
phenix.autobuild after_autosol input_map_file=None
</PRE>
This command will force input_map_file to be None (and ignore the
resolve.mtz map from AutoSol).  This AutoBuild run will also produce an 
.eff file: AutoBuild_run_1_/autobuild.eff.  If you now run AutoBuild using
this .eff file with:
<PRE style="face=courier">
phenix.autobuild AutoBuild_run_1_/autobuild.eff
</PRE>
the AutoBuild Wizard will see input_map_file = None in the .eff file, but
the Wizard will ignore this command because the value of None
is identical to the default for input_map_file.
The Wizard will then read the information from AutoSol, including 
the resolve.mtz input map file and it will use this file.
<p>To get around this, you can use the fact that anything defined at the 
command line is fixed and will not be overwritten by the wizard. In the
AutoBuild case, you could say:
<PRE style="face=courier">
phenix.autobuild AutoBuild_run_1_/autobuild.eff input_map_file=None
</PRE>
and then the input_map_file from AutoSol would be ignored.

</UL>

      <P><H5><U>Literature</U></H5><P>

<TABLE width=670 border=0>
  <TBODY>
  <TR>
    <TD>
      <TABLE cellSpacing=3 cellPadding=1 width="100%" align=center border=0>
        <TBODY>

        <TR id=terwilliger2007a>
          <TD align=left bgColor=eeeee8><FONT 
            color=000000 size=2><B>Ligand identification using electron-density
            map correlations.</B> T. C. Terwilliger, P. D. Adams, N. W. Moriarty
            and J. D. Cohn <A
            href="http://www.iucr.org/cgi-bin/paper?ba5092"><I>Acta Cryst.</I>
            <B>D63</B>, 101-107 (2007)</A><BR></FONT></TD>
          <TD align=center bgColor=ffffff><A
            href="http://www.phenix-online.org/papers/ba5092_reprint.pdf"
            target=_main><FONT  color=000000
            size=2>[pdf]</FONT></A> </TD></TR>
        <TR id=terwilliger2006>
          <TD align=left bgColor=eeeee8><FONT 
            color=000000 size=2><B>Automated ligand fitting by core-fragment
            fitting and extension into density.</B> T. C. Terwilliger, H. Klei,
            P. D. Adams, N. W. Moriarty and J. D. Cohn <A
            href="http://www.iucr.org/cgi-bin/paper?dz5066"><I>Acta Cryst.</I>
            <B>D62</B>, 915-922 (2006)</A><BR></FONT></TD>
          <TD align=center bgColor=ffffff><A
            href="http://www.phenix-online.org/papers/dz5066_reprint.pdf"
            target=_main><FONT  color=000000
            size=2>[pdf]</FONT></A> </TD></TR>

        </TBODY>
     </TABLE>
    </TD>
  </TR>
  </TBODY>
</TABLE>
      <P><H5><U>Additional information</U></H5><P>


<!--REMARK PHENIX BODY END-->
