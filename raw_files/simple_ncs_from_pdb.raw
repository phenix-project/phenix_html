
<!--REMARK PHENIX TITLE START  Put your title here>


<H4><U>Finding NCS in chains from a PDB file with 
    simple_ncs_from_pdb</U></H4> 


<!--REMARK PHENIX TITLE END-->

<!--REMARK PHENIX BODY START   Put your text here. 
Anything enclosed in header html H4 H5 etc will go in the table of contents>


      <P><H5><U>Author(s)</U></H5><P>
<UL><LI>simple_ncs_from_pdb : Tom Terwilliger
<LI>Phil command interpreter: Ralf  W. Grosse-Kunstleve
<LI>find_domain: Peter Zwart
</UL>

      <P><H5><U>Purpose</U></H5><P>
The simple_ncs_from_pdb method identifies NCS in the chains in a PDB
file and writes out the NCS operators in forms suitable for phenix.refine,
resolve, and the AutoSol and AutoBuild Wizards.

      <P><H5><U>Usage</U></H5><P>

<P><H5>How simple_ncs_from_pdb works:</H5><P>

<P>The basic steps that the simple_ncs_from_pdb carries out are:
<P><UL><LI>(1) Identify sets of chains in the PDB file that have the same 
sequences. These are potential NCS-related chains.
<P><LI>(2) Determine which chains in a group actually are related by NCS within
   a given tolerance (max_rmsd, typically  2 A)
<P><LI>(3) Determine which residues in each chain are related by NCS, and
   break the chains into domains that do follow NCS if necessary.
<P><LI>(4) Determine the NCS operators for all chains in each NCS group or
 domain
</UL>

<P><H5>Additional notes on how simple_ncs_from_pdb works:</H5><P>

<P>The matching of chains is done in a first quick pass by calling
simple_ncs_from_pdb recursively and only using every 10th residue in
the analysis. This allows a check of whether chains that have the same
sequence really have the same structure or whether some such chains should
be in separate NCS groups. The use of only every 10th residue allows 
time for an all-against all matching of chains.

<P>If residue numbers are not the same for corresponding chains, but
they are simply offset by a constant for each chain, this will be
recognized and the chains will be aligned.

<P> An assumption in  simple_ncs_from_pdb is that residue numbers 
are consistent among chains. They do not have to be the same: chain A can
be residues 1-100 and chain B 211-300. However chain A cannot be residues
1-10 and 20-50, matching to chain B residues 1-10 and 21-51.

<P>Residue numbers are used to align pairs of chains,
maximizing identities of matching pairs of residues.
Pairs of chains that can match are identified. 

<P>Groupings of chains are chosen that maximize the
number of matching residues between each member of a group and the
first (reference) member of the group. 

<P>For a pair of chains, some
segments may match and others not. Each pair of segments must have a
length at least as long as min_length and  a percent identity at least
as high as min_percent.  A pair of segments
may not end in a mismatch. An overall pair of chains must have an rmsd
of CA atoms of less than or equal to rmsd_max.

<P>If find_invariant_domain is specified then once 
all chains that can be matched
with the above algorithm are identified, all remaining chains are matched,
allowing the break-up of chains into invariant domains. The invariant
domains each get a separate NCS group.

<P><H5><I>Output files from simple_ncs_from_pdb</I></H5><P>

<P>The output files that are produced are:

<P><UL><LI>NCS operators written in format for phenix.refine
<PRE style="face=courier">simple_ncs_from_pdb.ncs
</PRE>

<P><LI>NCS operators written in format for the PHENIX Wizards
<PRE style="face=courier">simple_ncs_from_pdb.ncs_spec
</PRE>
</UL>

      <P><H5><U>Examples</U></H5><P>

<P><H5>Standard run of simple_ncs_from_pdb:</H5><P>

Running simple_ncs_from pdb is easy. For example, you can type:
<PRE style="face=courier">phenix.simple_ncs_from_pdb anb.pdb
</PRE>
<P>Simple_ncs_from_pdb will analyze the chains in anb.pdb and identify
any NCS that exists. For this sample run the following output is produced:

<PRE style="face=courier">Chains in this PDB file:  ['A', 'N', 'B']
GROUPS BASED ON QUICK COMPARISON: [['A', 'B']]
Looking for invariant domains for ...: ['A', 'N', 'B'] [[[2, 525]], 
[[2, 259], [290, 525]], [[20, 525]]]

</PRE>
<P> There were 3 chains in the PDB file A, N and B.  Chains A and B were very
similar and clearly related by NCS. This relationship was found in a quick
comparison.  Chain N had the same sequence as A and B, but was not in 
the identical comparison. Searching for domains that did have NCS among all
three chains produced three domains, represented below by 4 NCS groups:

<PRE style="face=courier">
GROUP 1
Summary of NCS group with 3 operators:
ID of chain/residue where these apply: [['A', 'N', 'B'], [[[2, 5], [20, 35], 
[60, 76], [78, 107], [110, 137], [401, 431], [433, 483], [485, 516], 
[520, 525]], [[2, 5], [20, 35], [60, 76], [78, 107], [110, 137], 
[401, 431], [433, 483], [485, 516], [520, 525]], [[2, 5], [20, 35], 
[60, 76], [78, 107], [110, 137], [401, 431], [433, 483], [485, 516], 
[520, 525]]]]
RMSD (A) from chain A:  0.0  1.09  0.07
Number of residues matching chain A:[215, 215, 194]
Source of NCS info: anb.pdb
</PRE>
<P>The residues in chains A, B, and N in this group are 2-5, 20-35, 60-76,
 78-107, 110-137, 401-431, 433-483, 485-516 and 520-525.  Note that these 
are not all contiguous. These are all the residues that all have the same
relationships among the 3 chains. The RMSD of  CA atoms between chains A and N
is 1.09 A and between A and B is 0.07 A.
<P> The NCS operators relating these domains are given below.

<PRE style="face=courier">
OPERATOR 1
CENTER:   29.9208  -53.3304  -13.4779

ROTA 1:    1.0000    0.0000    0.0000
ROTA 2:    0.0000    1.0000    0.0000
ROTA 3:    0.0000    0.0000    1.0000
TRANS:     0.0000    0.0000    0.0000

OPERATOR 2
CENTER:   32.5410  -35.4227   20.2768

ROTA 1:    0.9370   -0.2825    0.2053
ROTA 2:   -0.3285   -0.9125    0.2439
ROTA 3:    0.1184   -0.2960   -0.9478
TRANS:   -14.7410  -79.9073   -8.5967

OPERATOR 3
CENTER:   50.0256  -91.8920  -13.6461

ROTA 1:    0.6257    0.7800   -0.0037
ROTA 2:   -0.7800    0.6257   -0.0010
ROTA 3:    0.0015    0.0035    1.0000
TRANS:    70.3889   42.4760    0.3937

GROUP 2
Summary of NCS group with 3 operators:
ID of chain/residue where these apply: [['A', 'N', 'B'], [[[6, 9], 
[56, 59], [517, 519]], [[6, 9], [56, 59], [517, 519]], [[6, 9], 
[56, 59], [517, 519]]]]
RMSD (A) from chain A:  0.0  0.48  0.03
Number of residues matching chain A:[11, 11, 11]
Source of NCS info: anb.pdb

OPERATOR 1
CENTER:   47.5037  -61.5641  -11.2751

ROTA 1:    1.0000    0.0000    0.0000
ROTA 2:    0.0000    1.0000    0.0000
ROTA 3:    0.0000    0.0000    1.0000
TRANS:     0.0000    0.0000    0.0000

OPERATOR 2
CENTER:   51.8984  -33.6038   20.9877

ROTA 1:    0.9367   -0.2981    0.1836
ROTA 2:   -0.3113   -0.9492    0.0469
ROTA 3:    0.1603   -0.1011   -0.9819
TRANS:   -14.9810  -78.2888   -2.3823

OPERATOR 3
CENTER:   66.8308  -82.9508  -11.4633

ROTA 1:    0.6255    0.7802   -0.0016
ROTA 2:   -0.7802    0.6255   -0.0025
ROTA 3:   -0.0009    0.0028    1.0000
TRANS:    70.3999   42.4366    0.4815

GROUP 3
Summary of NCS group with 3 operators:
ID of chain/residue where these apply: [['A', 'N', 'B'], [[[193, 255], 
[257, 259], [290, 355], [357, 374]], [[193, 255], [257, 259], 
[290, 355], [357, 374]], [[193, 255], [257, 259], [290, 355], [357, 374]]]]
RMSD (A) from chain A:  0.0  0.61  0.01
Number of residues matching chain A:[150, 150, 150]
Source of NCS info: anb.pdb

OPERATOR 1
CENTER:   36.1219  -37.6124  -62.1437

ROTA 1:    1.0000    0.0000    0.0000
ROTA 2:    0.0000    1.0000    0.0000
ROTA 3:    0.0000    0.0000    1.0000
TRANS:     0.0000    0.0000    0.0000

OPERATOR 2
CENTER:   39.1403  -33.0801   60.7270

ROTA 1:    0.7650    0.3808   -0.5194
ROTA 2:    0.0664   -0.8488   -0.5245
ROTA 3:   -0.6406    0.3668   -0.6746
TRANS:    50.3180  -36.4383   16.0299

OPERATOR 3
CENTER:   40.9347  -76.7723  -62.2004

ROTA 1:    0.5942    0.8043   -0.0007
ROTA 2:   -0.8043    0.5942   -0.0064
ROTA 3:   -0.0047    0.0043    1.0000
TRANS:    73.5084   40.5311    0.5807

GROUP 4
Summary of NCS group with 3 operators:
ID of chain/residue where these apply: [['A', 'N', 'B'], [[[36, 41]], 
[[36, 41]], [[36, 41]]]]
RMSD (A) from chain A:  0.0  0.22  0.03
Number of residues matching chain A:[6, 6, 6]
Source of NCS info: anb.pdb

OPERATOR 1
CENTER:   45.4522  -37.4720  -14.4660

ROTA 1:    1.0000    0.0000    0.0000
ROTA 2:    0.0000    1.0000    0.0000
ROTA 3:    0.0000    0.0000    1.0000
TRANS:     0.0000    0.0000    0.0000

OPERATOR 2
CENTER:   42.1483  -55.6520   24.0535

ROTA 1:    0.9444   -0.3074    0.1171
ROTA 2:   -0.2975   -0.9501   -0.0940
ROTA 3:    0.1402    0.0540   -0.9887
TRANS:   -14.2728  -75.5420    6.4099

OPERATOR 3
CENTER:   46.7900  -69.5227  -14.6653

ROTA 1:    0.6247    0.7809   -0.0013
ROTA 2:   -0.7809    0.6247    0.0028
ROTA 3:    0.0030   -0.0008    1.0000
TRANS:    70.4964   42.5349    0.0067

NCS operators written in format for resolve to: simple_ncs_from_pdb.resolve
NCS operators written in format for phenix.refine to: simple_ncs_from_pdb.ncs
NCS written as ncs object information to: simple_ncs_from_pdb.ncs_spec
</PRE>

      <P><H5><U>Possible Problems</U></H5><P>

<P><H5>Specific limitations and problems:</H5><P>

<P><UL><LI>If user specifies chains to be in a suggested NCS group, 
but they are too dissimilar as a whole (rmsd > max_rmsd_use) then 
the group is rejected even if some fragment of the chains could be
similar.
<P><LI>Chain specification from suggested_ncs_groups could in principle be
have than one chain in one group...and simple_ncs_from_pdb can only use
suggested groups that consist of N copies of single chains.
</UL>

      <P><H5><U>Literature</U></H5><P>
      <P><H5><U>Additional information</U></H5><P>


<!--REMARK PHENIX BODY END-->
