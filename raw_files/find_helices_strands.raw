
<!--REMARK PHENIX TITLE START  Put your title here>


<H4><U>Rapid helix fitting to a map with find_helices_strands</U></H4>


<!--REMARK PHENIX TITLE END-->

<!--REMARK PHENIX BODY START   Put your text here.
Anything enclosed in header html H4 H5 etc will go in the table of contents>


<P><H5><U>Author(s)</U></H5><P>

<UL>
<LI>find_helices_strands: Tom Terwilliger
</LI></UL>

<P><H5><U>Purpose</U></H5><P>

find_helices_strands is a command line tool for finding helices and strands
in a map and building an model of the parts of a structure that have regular
secondary structure.  It can be used for protein, RNA, and DNA.

An option is to use a rapid chain-tracing algorithm to build CA of
proteins, followed by reconstruction of a full model.

<P><H5><U>Usage</U></H5><P>

<P><H5>How find_helices_strands finds helices and strands in maps:</H5><P>

find_helices_strands first identifies helical segments as rods of density at
5-8 A. Then it identifies helices at higher resolution keeping the 
overall locations of the helices fixed. Then it identifies the directions
and CA positions of helices by noting the helical pattern of high-density
points offset slightly along the helix axis from the main helical density
(as used in &quot;O&quot; to identify helix direction).  Finally model
helices are fit to the density using the positions and orientations
identified in the earlier steps.  A similar procedure is used to identify
strands. Then the helices and strands are combined into a single model.

<P><H5>How find_helices_strands finds RNA and DNA helices in maps:</H5><P>
find_helices_strands finds RNA and DNA helices differently than it finds
helices in proteins. It uses a convolution search to find places in 
the asymmetric unit where an A-form RNA or B-form DNA helix can be placed.
These are assembled into contiguous helical segments if possible. 
The resolution of this search is 4.5 A if you have resolution beyond
4.5 A, and the resolution of your data otherwise.

<P><H5>How trace_chain finds CA positions in maps:</H5><P>
The RESOLVE trace_chain algorithm places dummy atoms down the middle of all the
tubes of density in a map, then it attempts to find sets of these
atoms that may be CA atoms, where the atoms are spaced by 3.8 A and 
where there is strong density between each pair. This yields segments 
represented by CA atoms.  Next PULCHRA (
Rotkiewicz P., Skolnick J.,Fast procedure for reconstruction
 of full-atom protein models from reduced representations.
 J Comput Chem. 2008 Jul 15;29(9):1460-5.) is used to reconstruct a full
main-chain model.  Finally RESOLVE is used to assemble all the resulting
fragments into a model.

<P><H5><I>Output files from find_helices_strands</I></H5><P>
If you run find_helices_strands with my_map.mtz then you will get:
<b>my_map.mtz_helices_strands.pdb</b> which is 
a PDB file containing helices from your structure.

<P><H5><U>Examples</U></H5><P>

<P><H5>Standard run of find_helices_strands:</H5><P>

Running the find_helices_strands is easy. From the command-line you can
type:
<PRE style="face=courier">phenix.find_helices_strands map_coeffs.mtz quick=True
</PRE>
<P> If you want a more thorough run, then skip the "quick=True" flag.

<p>If you want (or need) to specify the column names from your mtz file, you
will need to tell find_helices_strands what FP and PHIB are, in this format:
<PRE style="face=courier">phenix.find_helices_strands map_coeffs.mtz \
labin="LABIN FP=2FOFCWT PHIB=PH2FOFCWT"
</PRE>

<p>If you want to specify a sequence file, then in the last step find_helices_strands
will try to align your sequence with the map and model:
<PRE style="face=courier">phenix.find_helices_strands map_coeffs.mtz seq_file=seq.dat
</PRE>

<p>If you want to use the trace_chain algorithm, then  specify:
<PRE style="face=courier">phenix.find_helices_strands map_coeffs.mtz seq_file=seq.dat trace_chain=True
</PRE>

<P><H5>Using find_helices_strands to bootstrap phenix.autobuild:</H5><P>

If you run phenix.autobuild at low resolution (3.5 A or lower) then your model
may have strands built instead of helices.  You can use find_helices_strands to
help bootstrap autobuild model-building by providing the helical model
from find_helices_strands to phenix.autobuild.  
<p> Just run phenix.find_helices_strands with your best map map_coeffs.mtz. 
Then take the helical model map_coeffs.mtz_helices.pdb and pass it to
phenix.autobuild with the keyword (in addition to your usual keywords for
autobuild):
<PRE style="face=courier">consider_main_chain_list=map_coeffs.mtz_helices.pdb
</PRE>
Then the AutoBuild wizard will treat your helical model just like one of the 
models that it builds, and merge it into the model as it is being assembled.

<P><H5><U>Possible Problems</U></H5><P>

<P><H5>Specific limitations and problems:</H5><P>

<P><H5><U>Literature</U></H5><P>

<P><H5><U>Additional information</U></H5><P>


<!--REMARK PHENIX BODY END-->
